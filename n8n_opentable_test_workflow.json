
{
  "name": "OpenTable Scraper - Updated Structure",
  "nodes": [
    {
      "parameters": {},
      "id": "27018783-a079-4469-bc2a-1c7c9135e808",
      "name": "Start",
      "type": "n8n-nodes-base.start",
      "typeVersion": 1,
      "position": [
        240,
        300
      ]
    },
    {
      "parameters": {
        "url": "https://app.scrapingbee.com/api/v1/?api_key=PE0EL019IKOKWT8MID15O5HQYGEPDC9FT6EQZK8DKJ7RBLP15MGGTOB8YQQMAKFGAD8Q1VA9RRTNIPK5&url=https%3A%2F%2Fwww.opentable.com%2Fs%2F%3Fk%3Dnew%2520york&forward_headers=true",
        "options": {
          "response": {
            "response": {
              "fullResponse": false,
              "responseFormat": "string"
            }
          },
          "headers": {
            "header": [
              {
                "name": "User-Agent",
                "value": "curl/8.7.1"
              }
            ]
          }
        }
      },
      "id": "8482a524-76e3-4d43-9828-569a988185c0",
      "name": "Fetch via ScrapingBee",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        460,
        300
      ]
    },
    {
      "parameters": {
        "jsCode": "const cheerio = require('cheerio');\n\n// Safely get the HTML data\nlet html = '';\ntry {\n  const inputData = items[0]?.json;\n  html = inputData?.data || inputData?.body || inputData || '';\n  \n  // Ensure html is a string\n  if (typeof html !== 'string') {\n    html = String(html);\n  }\n} catch (error) {\n  console.log('Error getting HTML data:', error.message);\n  return [];\n}\n\nif (!html || html.length === 0) {\n  console.log('No HTML data found');\n  return [];\n}\n\nconst $ = cheerio.load(html);\n\n// Explicitly type the restaurants array\nconst restaurants = [];\n\n// Extract from JSON data in script tags (main method for OpenTable)\nconst scriptContent = $('#primary-window-vars').text();\nif (scriptContent) {\n  try {\n    const jsonData = JSON.parse(scriptContent);\n    const restaurantsData = jsonData?.windowVariables?.__INITIAL_STATE__?.multiSearch?.restaurants;\n    \n    if (restaurantsData && Array.isArray(restaurantsData)) {\n      console.log(`Found ${restaurantsData.length} restaurants in JSON data`);\n      \n      restaurantsData.forEach((restaurant, index) => {\n        try {\n          // Build full profile link\n          const profileLink = restaurant.urls?.profileLink?.link || '';\n          const fullLink = profileLink.startsWith('http') ? profileLink : `https://www.opentable.com${profileLink}`;\n          \n          // Get image URL with fallback\n          let imageUrl = '';\n          if (restaurant.photos?.profileV3?.medium?.url) {\n            imageUrl = restaurant.photos.profileV3.medium.url;\n            if (!imageUrl.startsWith('http')) {\n              imageUrl = `https:${imageUrl}`;\n            }\n          }\n          \n          // Build address string\n          let address = 'Unknown';\n          if (restaurant.address) {\n            const parts = [];\n            if (restaurant.address.line1) parts.push(restaurant.address.line1);\n            if (restaurant.address.city) parts.push(restaurant.address.city);\n            if (restaurant.address.state) parts.push(restaurant.address.state);\n            if (restaurant.address.postCode) parts.push(restaurant.address.postCode);\n            address = parts.join(', ');\n          }\n          \n          const restaurantData = {\n            restaurantId: restaurant.restaurantId || null,\n            name: restaurant.name || 'Unknown',\n            link: fullLink,\n            cuisine: restaurant.primaryCuisine?.name || 'Unknown',\n            imageUrl: imageUrl,\n            rating: restaurant.statistics?.reviews?.ratings?.overall?.rating || 0,\n            reviewCount: restaurant.statistics?.reviews?.allTimeTextReviewCount || 0,\n            priceBand: restaurant.priceBand?.name || 'Unknown',\n            priceBandId: restaurant.priceBand?.priceBandId || null,\n            neighborhood: restaurant.neighborhood?.name || 'Unknown',\n            address: address,\n            description: restaurant.description || '',\n            diningStyle: restaurant.diningStyle || 'Unknown',\n            coordinates: {\n              latitude: restaurant.coordinates?.latitude || null,\n              longitude: restaurant.coordinates?.longitude || null\n            },\n            contactInfo: {\n              phone: restaurant.contactInformation?.formattedPhoneNumber || '',\n              phoneRaw: restaurant.contactInformation?.phoneNumber || ''\n            },\n            features: {\n              bar: restaurant.features?.bar || false,\n              outdoor: restaurant.features?.outdoor || false,\n              counter: restaurant.features?.counter || false,\n              highTop: restaurant.features?.highTop || false\n            },\n            offers: restaurant.offers || [],\n            isPromoted: restaurant.isPromoted || false,\n            hasTakeout: restaurant.hasTakeout || false,\n            topReview: restaurant.topReview?.highlightedText || '',\n            justAdded: restaurant.justAddedDetails?.justAdded || false\n          };\n          \n          restaurants.push(restaurantData);\n          \n        } catch (error) {\n          console.log(`Error processing restaurant ${index}:`, error.message);\n        }\n      });\n    } else {\n      console.log('No restaurants array found in JSON data');\n      console.log('Available keys in __INITIAL_STATE__:', Object.keys(jsonData?.windowVariables?.__INITIAL_STATE__ || {}));\n    }\n  } catch (error) {\n    console.log('Could not parse JSON data:', error.message);\n  }\n}\n\n// Enhanced fallback to CSS selectors if JSON parsing failed\nif (restaurants.length === 0) {\n  console.log('Falling back to CSS selectors - scanning DOM structure');\n  \n  // Log some DOM structure for debugging\n  console.log('Title:', $('title').text());\n  console.log('Script tags found:', $('script').length);\n  console.log('Looking for restaurant cards...');\n  \n  // Try different possible selectors\n  const possibleSelectors = [\n    \"[data-test*='restaurant']\",\n    \"[class*='restaurant']\",\n    \"h3, h2, h1\",\n    \"a[href*='/r/']\"\n  ];\n  \n  possibleSelectors.forEach(selector => {\n    const elements = $(selector);\n    if (elements.length > 0) {\n      console.log(`Found ${elements.length} elements with selector: ${selector}`);\n    }\n  });\n  \n  // Basic extraction attempt\n  const restaurantLinks = $(\"a[href*='/r/']\");\n  console.log(`Found ${restaurantLinks.length} restaurant links`);\n  \n  restaurantLinks.each((i, el) => {\n    const $el = $(el);\n    const href = $el.attr('href');\n    const text = $el.text().trim();\n    \n    if (text && href) {\n      restaurants.push({\n        name: text,\n        link: href.startsWith('http') ? href : `https://www.opentable.com${href}`,\n        cuisine: 'Unknown',\n        imageUrl: '',\n        rating: 0,\n        reviewCount: 0,\n        priceBand: 'Unknown',\n        neighborhood: 'Unknown',\n        address: 'Unknown',\n        description: ''\n      });\n    }\n  });\n}\n\nconsole.log(`Successfully extracted ${restaurants.length} restaurants`);\nif (restaurants.length > 0) {\n  console.log('Sample restaurant data:');\n  console.log(JSON.stringify(restaurants[0], null, 2));\n}\n\nreturn restaurants;"
      },
      "id": "dac1db94-fa39-42e0-919b-e0e70ef3c528",
      "name": "Extract Restaurant Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        680,
        300
      ]
    },
    {
      "parameters": {
        "jsCode": "// Add some debugging info and clean up the data\nconst restaurants = items.filter(item => item.json.name && item.json.name !== 'Unknown');\n\nconsole.log(`Processing ${restaurants.length} valid restaurants`);\n\n// Add timestamp and source\nconst processedRestaurants = restaurants.map(restaurant => ({\n  ...restaurant.json,\n  scraped_at: new Date().toISOString(),\n  source: 'OpenTable',\n  search_query: 'new york'\n}));\n\nreturn processedRestaurants;"
      },
      "id": "process-data",
      "name": "Process and Clean Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        900,
        300
      ]
    }
  ],
  "connections": {
    "Start": {
      "main": [
        [
          {
            "node": "Fetch via ScrapingBee",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch via ScrapingBee": {
      "main": [
        [
          {
            "node": "Extract Restaurant Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Restaurant Data": {
      "main": [
        [
          {
            "node": "Process and Clean Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "meta": {
    "instanceId": "0192b40c03f1f0a5599cfa5317602d78af1f928c4282591b3a88a8e071138389"
  }
}
