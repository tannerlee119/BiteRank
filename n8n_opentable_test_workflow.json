{
  "name": "OpenTable to Supabase - Simple Scraper",
  "nodes": [
    {
      "parameters": {},
      "id": "27018783-a079-4469-bc2a-1c7c9135e808",
      "name": "Start",
      "type": "n8n-nodes-base.start",
      "typeVersion": 1,
      "position": [240, 300]
    },
    {
      "parameters": {
        "url": "https://app.scrapingbee.com/api/v1/?api_key=PE0EL019IKOKWT8MID15O5HQYGEPDC9FT6EQZK8DKJ7RBLP15MGGTOB8YQQMAKFGAD8Q1VA9RRTNIPK5&url=https%3A%2F%2Fwww.opentable.com%2Fs%2F&premium_proxy=true&render_js=true&wait=5000&block_resources=false&country_code=US",
        "options": {
          "response": {
            "response": {
              "fullResponse": false,
              "responseFormat": "string"
            }
          },
          "timeout": 30000,
          "headers": {
            "header": [
              {
                "name": "Accept",
                "value": "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8"
              },
              {
                "name": "Accept-Language",
                "value": "en-US,en;q=0.9"
              },
              {
                "name": "User-Agent",
                "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36"
              }
            ]
          }
        }
      },
      "id": "fetch-opentable",
      "name": "Fetch OpenTable Data",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [360, 300]
    },
    {
      "parameters": {
        "jsCode": "// Extract restaurant data from OpenTable HTML\nlet html = '';\ntry {\n  const inputData = items[0] && items[0].json ? items[0].json : {};\n  html = inputData.data || inputData.body || inputData || '';\n  if (typeof html !== 'string') {\n    html = String(html);\n  }\n  console.log('HTML data received, length:', html.length, 'characters');\n} catch (error) {\n  console.log('Error getting HTML data:', error.message);\n  return [{ json: { error: 'Failed to get HTML data', details: error.message } }];\n}\n\nif (!html || html.length === 0) {\n  console.log('No HTML data found');\n  return [{ json: { error: 'No HTML data received' } }];\n}\n\nlet restaurants = [];\n\n// Extract from primary-window-vars script tag\ntry {\n  console.log('Attempting to extract restaurant data from JSON');\n  \n  const scriptMatch = html.match(/<script id=\"primary-window-vars\" type=\"application\\/json\">(.*?)<\\/script>/s);\n  \n  if (scriptMatch) {\n    console.log('Found primary-window-vars script tag');\n    const jsonContent = scriptMatch[1];\n    \n    if (jsonContent && jsonContent.length > 0) {\n      const data = JSON.parse(jsonContent);\n      console.log('Successfully parsed JSON from primary-window-vars');\n      \n      // Try different possible paths for restaurant data\n      const possiblePaths = [\n        data?.windowVariables?.__INITIAL_STATE__?.multiSearch?.restaurants,\n        data?.windowVariables?.__APOLLO_STATE__?.restaurants,\n        data?.windowVariables?.__INITIAL_STATE__?.restaurants,\n        data?.multiSearch?.restaurants\n      ];\n      \n      for (const restaurantData of possiblePaths) {\n        if (restaurantData && Array.isArray(restaurantData) && restaurantData.length > 0) {\n          console.log(`Found ${restaurantData.length} restaurants in data structure`);\n          \n          // Process up to 10 restaurants\n          const limitedRestaurants = restaurantData.slice(0, 10);\n          \n          for (const restaurant of limitedRestaurants) {\n            try {\n              const restaurantObj = {\n                restaurant_id: restaurant.restaurantId || null,\n                name: restaurant.name || 'Unknown',\n                link: restaurant.urls?.profileLink?.link ? \n                  (restaurant.urls.profileLink.link.startsWith('http') ? \n                    restaurant.urls.profileLink.link : \n                    'https://www.opentable.com' + restaurant.urls.profileLink.link) : '',\n                cuisine: restaurant.primaryCuisine?.name || 'Unknown',\n                rating: restaurant.statistics?.reviews?.ratings?.overall?.rating || 0,\n                review_count: restaurant.statistics?.reviews?.allTimeTextReviewCount || 0,\n                price_band: restaurant.priceBand?.name || 'Unknown',\n                neighborhood: restaurant.neighborhood?.name || 'Unknown',\n                address: restaurant.address ? \n                  [restaurant.address.line1, restaurant.address.city, restaurant.address.state]\n                    .filter(Boolean).join(', ') : 'Unknown',\n                phone: restaurant.contactInformation?.formattedPhoneNumber || '',\n                image_url: restaurant.photos?.profileV3?.medium?.url ? \n                  (restaurant.photos.profileV3.medium.url.startsWith('http') ? \n                    restaurant.photos.profileV3.medium.url : \n                    'https:' + restaurant.photos.profileV3.medium.url) : '',\n                description: (restaurant.description || '').substring(0, 500),\n                latitude: restaurant.coordinates?.latitude || null,\n                longitude: restaurant.coordinates?.longitude || null,\n                has_bar: restaurant.features?.bar || false,\n                has_outdoor: restaurant.features?.outdoor || false,\n                has_takeout: restaurant.hasTakeout || false,\n                is_promoted: restaurant.isPromoted || false,\n                top_review: restaurant.topReview?.highlightedText || '',\n                scraped_at: new Date().toISOString(),\n                source: 'OpenTable'\n              };\n              \n              restaurants.push(restaurantObj);\n              \n            } catch (error) {\n              console.log('Error processing individual restaurant:', error.message);\n            }\n          }\n          \n          if (restaurants.length > 0) {\n            break;\n          }\n        }\n      }\n    }\n  }\n} catch (error) {\n  console.log('JSON extraction failed:', error.message);\n}\n\n// Return results\nif (restaurants.length > 0) {\n  console.log(`Successfully extracted ${restaurants.length} restaurants`);\n  return restaurants.map(r => ({ json: r }));\n} else {\n  console.log('No restaurants found');\n  return [{\n    json: {\n      error: 'No restaurants extracted',\n      html_length: html.length,\n      contains_restaurant_text: html.toLowerCase().includes('restaurant'),\n      html_sample: html.substring(0, 500)\n    }\n  }];\n}"
      },
      "id": "extract-restaurants",
      "name": "Extract Restaurant Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [580, 300]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://YOUR_PROJECT.supabase.co/rest/v1/restaurants",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "headers": {
          "header": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "Prefer",
              "value": "return=representation"
            }
          ]
        },
        "body": {
          "bodyType": "json",
          "jsonBody": "={\n  \"name\": \"{{ $json.name }}\",\n  \"cuisine\": \"{{ $json.cuisine }}\",\n  \"rating\": {{ $json.rating }},\n  \"price_range\": \"{{ $json.price_band }}\",\n  \"description\": \"{{ $json.description }}\",\n  \"image_url\": \"{{ $json.image_url }}\",\n  \"source_url\": \"{{ $json.link }}\"\n}"
        }
      },
      "id": "save-to-supabase",
      "name": "Save to Supabase",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [800, 300]
    },
    {
      "parameters": {
        "jsCode": "// Summary of results\nconst results = items || [];\nconst successful = results.filter(item => !item.json.error);\nconst errors = results.filter(item => item.json.error);\n\nconsole.log(`Processing complete:`);\nconsole.log(`- Successful saves: ${successful.length}`);\nconsole.log(`- Errors: ${errors.length}`);\n\nif (successful.length > 0) {\n  console.log('Successfully saved restaurants:');\n  successful.forEach((item, i) => {\n    console.log(`${i + 1}. ${item.json.name} (${item.json.cuisine})`);\n  });\n}\n\nif (errors.length > 0) {\n  console.log('Errors encountered:');\n  errors.forEach((item, i) => {\n    console.log(`${i + 1}. ${item.json.error}`);\n  });\n}\n\nreturn [{\n  json: {\n    summary: {\n      total_processed: results.length,\n      successful_saves: successful.length,\n      errors: errors.length,\n      timestamp: new Date().toISOString()\n    },\n    restaurants_saved: successful.map(item => ({\n      name: item.json.name,\n      cuisine: item.json.cuisine,\n      rating: item.json.rating\n    }))\n  }\n}];"
      },
      "id": "process-results",
      "name": "Process Results",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1020, 300]
    }
  ],
  "connections": {
    "Start": {
      "main": [
        [
          {
            "node": "Fetch OpenTable Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch OpenTable Data": {
      "main": [
        [
          {
            "node": "Extract Restaurant Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Restaurant Data": {
      "main": [
        [
          {
            "node": "Save to Supabase",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save to Supabase": {
      "main": [
        [
          {
            "node": "Process Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "meta": {
    "instanceId": "0192b40c03f1f0a5599cfa5317602d78af1f928c4282591b3a88a8e071138389"
  }
}