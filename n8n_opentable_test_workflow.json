{
  "name": "OpenTable Scraper - Updated Structure",
  "nodes": [
    {
      "parameters": {},
      "id": "27018783-a079-4469-bc2a-1c7c9135e808",
      "name": "Start",
      "type": "n8n-nodes-base.start",
      "typeVersion": 1,
      "position": [
        240,
        300
      ]
    },
    {
      "parameters": {
        "url": "https://app.scrapingbee.com/api/v1/?api_key=PE0EL019IKOKWT8MID15O5HQYGEPDC9FT6EQZK8DKJ7RBLP15MGGTOB8YQQMAKFGAD8Q1VA9RRTNIPK5&url=https%3A%2F%2Fwww.opentable.com%2Fs%2F%3Fk%3Dnew%2520york&forward_headers=true",
        "options": {
          "response": {
            "response": {
              "fullResponse": false,
              "responseFormat": "string"
            }
          },
          "headers": {
            "header": [
              {
                "name": "User-Agent",
                "value": "curl/8.7.1"
              }
            ]
          }
        }
      },
      "id": "8482a524-76e3-4d43-9828-569a988185c0",
      "name": "Fetch via ScrapingBee",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        460,
        300
      ]
    },
    {
      "parameters": {
        "jsCode": "const cheerio = require('cheerio');\n\n// Safely get the HTML data with detailed validation\nlet html = '';\ntry {\n  const inputData = items[0] && items[0].json ? items[0].json : {};\n  html = inputData.data || inputData.body || inputData || '';\n  \n  // Ensure html is a string\n  if (typeof html !== 'string') {\n    html = String(html);\n  }\n  \n  console.log('HTML data length: ' + html.length + ' characters');\n  console.log('HTML preview (first 200 chars): ' + html.substring(0, 200));\n  \n} catch (error) {\n  console.log('Error getting HTML data: ' + error.message);\n  return [];\n}\n\nif (!html || html.length === 0) {\n  console.log('No HTML data found - stopping to prevent wasted API calls');\n  return [];\n}\n\n// Check if we got a valid HTML response (not an error page)\nif (html.includes('Access Denied') || html.includes('Blocked') || html.includes('Rate Limited')) {\n  console.log('Detected access restriction - stopping to prevent wasted API calls');\n  return [{ json: { error: 'Access restricted', html_length: html.length } }];\n}\n\nconst $ = cheerio.load(html);\n\n// Initialize restaurants array\nvar restaurants = [];\n\n// Extract from JSON data in script tags (main method for OpenTable)\nconst scriptContent = $('#primary-window-vars').text();\nif (scriptContent) {\n  try {\n    const jsonData = JSON.parse(scriptContent);\n    console.log('Successfully parsed JSON data');\n    \n    // Navigate through the nested structure more safely\n    var restaurantsData = null;\n    if (jsonData && jsonData.windowVariables && jsonData.windowVariables.__INITIAL_STATE__ && jsonData.windowVariables.__INITIAL_STATE__.multiSearch) {\n      restaurantsData = jsonData.windowVariables.__INITIAL_STATE__.multiSearch.restaurants;\n    }\n    \n    if (restaurantsData && Array.isArray(restaurantsData)) {\n      console.log('Found ' + restaurantsData.length + ' restaurants in JSON data');\n      \n      for (var i = 0; i < Math.min(restaurantsData.length, 5); i++) {\n        var restaurant = restaurantsData[i];\n        try {\n          // Build full profile link\n          var profileLink = '';\n          if (restaurant.urls && restaurant.urls.profileLink && restaurant.urls.profileLink.link) {\n            profileLink = restaurant.urls.profileLink.link;\n          }\n          var fullLink = profileLink.startsWith('http') ? profileLink : 'https://www.opentable.com' + profileLink;\n          \n          // Get image URL with fallback\n          var imageUrl = '';\n          if (restaurant.photos && restaurant.photos.profileV3 && restaurant.photos.profileV3.medium && restaurant.photos.profileV3.medium.url) {\n            imageUrl = restaurant.photos.profileV3.medium.url;\n            if (!imageUrl.startsWith('http')) {\n              imageUrl = 'https:' + imageUrl;\n            }\n          }\n          \n          // Build address string\n          var address = 'Unknown';\n          if (restaurant.address) {\n            var parts = [];\n            if (restaurant.address.line1) parts.push(restaurant.address.line1);\n            if (restaurant.address.city) parts.push(restaurant.address.city);\n            if (restaurant.address.state) parts.push(restaurant.address.state);\n            if (restaurant.address.postCode) parts.push(restaurant.address.postCode);\n            address = parts.join(', ');\n          }\n          \n          var restaurantData = {\n            restaurantId: restaurant.restaurantId || null,\n            name: restaurant.name || 'Unknown',\n            link: fullLink,\n            cuisine: (restaurant.primaryCuisine && restaurant.primaryCuisine.name) || 'Unknown',\n            imageUrl: imageUrl,\n            rating: (restaurant.statistics && restaurant.statistics.reviews && restaurant.statistics.reviews.ratings && restaurant.statistics.reviews.ratings.overall && restaurant.statistics.reviews.ratings.overall.rating) || 0,\n            reviewCount: (restaurant.statistics && restaurant.statistics.reviews && restaurant.statistics.reviews.allTimeTextReviewCount) || 0,\n            priceBand: (restaurant.priceBand && restaurant.priceBand.name) || 'Unknown',\n            priceBandId: (restaurant.priceBand && restaurant.priceBand.priceBandId) || null,\n            neighborhood: (restaurant.neighborhood && restaurant.neighborhood.name) || 'Unknown',\n            address: address,\n            description: restaurant.description || '',\n            diningStyle: restaurant.diningStyle || 'Unknown',\n            coordinates: {\n              latitude: (restaurant.coordinates && restaurant.coordinates.latitude) || null,\n              longitude: (restaurant.coordinates && restaurant.coordinates.longitude) || null\n            },\n            contactInfo: {\n              phone: (restaurant.contactInformation && restaurant.contactInformation.formattedPhoneNumber) || '',\n              phoneRaw: (restaurant.contactInformation && restaurant.contactInformation.phoneNumber) || ''\n            },\n            features: {\n              bar: (restaurant.features && restaurant.features.bar) || false,\n              outdoor: (restaurant.features && restaurant.features.outdoor) || false,\n              counter: (restaurant.features && restaurant.features.counter) || false,\n              highTop: (restaurant.features && restaurant.features.highTop) || false\n            },\n            offers: restaurant.offers || [],\n            isPromoted: restaurant.isPromoted || false,\n            hasTakeout: restaurant.hasTakeout || false,\n            topReview: (restaurant.topReview && restaurant.topReview.highlightedText) || '',\n            justAdded: (restaurant.justAddedDetails && restaurant.justAddedDetails.justAdded) || false\n          };\n          \n          restaurants.push(restaurantData);\n          \n        } catch (error) {\n          console.log('Error processing restaurant ' + i + ': ' + error.message);\n        }\n      }\n    } else {\n      console.log('No restaurants array found in JSON data');\n      if (jsonData && jsonData.windowVariables && jsonData.windowVariables.__INITIAL_STATE__) {\n        console.log('Available keys in __INITIAL_STATE__: ' + Object.keys(jsonData.windowVariables.__INITIAL_STATE__).join(', '));\n      }\n    }\n  } catch (error) {\n    console.log('Could not parse JSON data: ' + error.message);\n    console.log('Script content preview: ' + scriptContent.substring(0, 500));\n  }\n} else {\n  console.log('No script tag with id=\"primary-window-vars\" found');\n}\n\n// Enhanced fallback to CSS selectors if JSON parsing failed\nif (restaurants.length === 0) {\n  console.log('Falling back to CSS selectors - scanning DOM structure');\n  \n  // Log some DOM structure for debugging\n  console.log('Title: ' + $('title').text());\n  console.log('Script tags found: ' + $('script').length);\n  console.log('Looking for restaurant cards...');\n  \n  // Try different possible selectors\n  var possibleSelectors = [\n    \"[data-test*='restaurant']\",\n    \"[class*='restaurant']\",\n    \"h3, h2, h1\",\n    \"a[href*='/r/']\"\n  ];\n  \n  for (var j = 0; j < possibleSelectors.length; j++) {\n    var selector = possibleSelectors[j];\n    var elements = $(selector);\n    if (elements.length > 0) {\n      console.log('Found ' + elements.length + ' elements with selector: ' + selector);\n    }\n  }\n  \n  // Basic extraction attempt\n  var restaurantLinks = $(\"a[href*='/r/']\");\n  console.log('Found ' + restaurantLinks.length + ' restaurant links');\n  \n  restaurantLinks.each(function(i, el) {\n    var $el = $(el);\n    var href = $el.attr('href');\n    var text = $el.text().trim();\n    \n    if (text && href && i < 5) {\n      restaurants.push({\n        name: text,\n        link: href.startsWith('http') ? href : 'https://www.opentable.com' + href,\n        cuisine: 'Unknown',\n        imageUrl: '',\n        rating: 0,\n        reviewCount: 0,\n        priceBand: 'Unknown',\n        neighborhood: 'Unknown',\n        address: 'Unknown',\n        description: ''\n      });\n    }\n  });\n}\n\nconsole.log('Successfully extracted ' + restaurants.length + ' restaurants');\nif (restaurants.length > 0) {\n  console.log('Sample restaurant data:');\n  console.log(JSON.stringify(restaurants[0], null, 2));\n}\n\n// Return the data in the format n8n expects\nvar result = [];\nfor (var k = 0; k < restaurants.length; k++) {\n  result.push({ json: restaurants[k] });\n}\n\nreturn result;"
      },
      "id": "dac1db94-fa39-42e0-919b-e0e70ef3c528",
      "name": "Extract Restaurant Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        680,
        300
      ]
    },
    {
      "parameters": {
        "jsCode": "// Add some debugging info and clean up the data\nconst restaurants = items.filter(item => item.json.name && item.json.name !== 'Unknown');\n\nconsole.log(`Processing ${restaurants.length} valid restaurants`);\n\n// Add timestamp and source\nconst processedRestaurants = restaurants.map(restaurant => ({\n  ...restaurant.json,\n  scraped_at: new Date().toISOString(),\n  source: 'OpenTable',\n  search_query: 'new york'\n}));\n\nreturn processedRestaurants;"
      },
      "id": "process-data",
      "name": "Process and Clean Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        900,
        300
      ]
    }
  ],
  "connections": {
    "Start": {
      "main": [
        [
          {
            "node": "Fetch via ScrapingBee",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch via ScrapingBee": {
      "main": [
        [
          {
            "node": "Extract Restaurant Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Restaurant Data": {
      "main": [
        [
          {
            "node": "Process and Clean Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "meta": {
    "instanceId": "0192b40c03f1f0a5599cfa5317602d78af1f928c4282591b3a88a8e071138389"
  }
}