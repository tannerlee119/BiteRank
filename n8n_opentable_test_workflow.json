
{
  "name": "OpenTable Scraper - Fixed Extraction",
  "nodes": [
    {
      "parameters": {},
      "id": "27018783-a079-4469-bc2a-1c7c9135e808",
      "name": "Start",
      "type": "n8n-nodes-base.start",
      "typeVersion": 1,
      "position": [
        240,
        300
      ]
    },
    {
      "parameters": {
        "url": "https://app.scrapingbee.com/api/v1/?api_key=PE0EL019IKOKWT8MID15O5HQYGEPDC9FT6EQZK8DKJ7RBLP15MGGTOB8YQQMAKFGAD8Q1VA9RRTNIPK5&url=https%3A%2F%2Fwww.opentable.com%2Fs%2F%3Fk%3Dnew%2520york&forward_headers=true",
        "options": {
          "response": {
            "response": {
              "fullResponse": false,
              "responseFormat": "string"
            }
          },
          "headers": {
            "header": [
              {
                "name": "User-Agent",
                "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36"
              }
            ]
          }
        }
      },
      "id": "8482a524-76e3-4d43-9828-569a988185c0",
      "name": "Fetch via ScrapingBee",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        460,
        300
      ]
    },
    {
      "parameters": {
        "jsCode": "// Extract restaurant data from OpenTable's JSON structure\nlet html = '';\ntry {\n  const inputData = items[0] && items[0].json ? items[0].json : {};\n  html = inputData.data || inputData.body || inputData || '';\n  \n  if (typeof html !== 'string') {\n    html = String(html);\n  }\n  \n  console.log('HTML data length:', html.length, 'characters');\n  \n} catch (error) {\n  console.log('Error getting HTML data:', error.message);\n  return [];\n}\n\nif (!html || html.length === 0) {\n  console.log('No HTML data found');\n  return [];\n}\n\n// Check for access restrictions\nif (html.includes('Access Denied') || html.includes('Blocked') || html.includes('Rate Limited')) {\n  console.log('Access restricted detected');\n  return [{ json: { error: 'Access restricted', html_length: html.length } }];\n}\n\nlet restaurants = [];\n\ntry {\n  // Find the script tag with JSON data\n  const scriptMatch = html.match(/<script id=\"primary-window-vars\" type=\"application\\/json\">(.*?)<\\/script>/s);\n  \n  if (!scriptMatch) {\n    console.log('Could not find primary-window-vars script tag');\n    return [{ json: { error: 'No script tag found', sample_html: html.substring(0, 500) } }];\n  }\n  \n  const jsonContent = scriptMatch[1];\n  console.log('Found JSON content, length:', jsonContent.length);\n  \n  const data = JSON.parse(jsonContent);\n  console.log('Successfully parsed JSON data');\n  \n  // Navigate to restaurant data\n  const restaurantData = data?.windowVariables?.__INITIAL_STATE__?.multiSearch?.restaurants;\n  \n  if (!restaurantData || !Array.isArray(restaurantData)) {\n    console.log('No restaurant array found in expected location');\n    // Debug: log available keys\n    if (data?.windowVariables?.__INITIAL_STATE__) {\n      console.log('Available keys in __INITIAL_STATE__:', Object.keys(data.windowVariables.__INITIAL_STATE__));\n    }\n    return [{ json: { error: 'No restaurants found', debug_info: 'Check __INITIAL_STATE__ structure' } }];\n  }\n  \n  console.log('Found', restaurantData.length, 'restaurants');\n  \n  // Process restaurants (limit to 5 for testing)\n  const limitedRestaurants = restaurantData.slice(0, 5);\n  \n  for (const restaurant of limitedRestaurants) {\n    try {\n      // Extract basic info\n      const name = restaurant.name || 'Unknown';\n      const restaurantId = restaurant.restaurantId || null;\n      const cuisine = restaurant.primaryCuisine?.name || 'Unknown';\n      const rating = restaurant.statistics?.reviews?.ratings?.overall?.rating || 0;\n      const reviewCount = restaurant.statistics?.reviews?.allTimeTextReviewCount || 0;\n      const priceBand = restaurant.priceBand?.name || 'Unknown';\n      const neighborhood = restaurant.neighborhood?.name || 'Unknown';\n      const description = restaurant.description || '';\n      \n      // Build profile link\n      let profileLink = '';\n      if (restaurant.urls?.profileLink?.link) {\n        profileLink = restaurant.urls.profileLink.link;\n        if (!profileLink.startsWith('http')) {\n          profileLink = 'https://www.opentable.com' + profileLink;\n        }\n      }\n      \n      // Get image URL\n      let imageUrl = '';\n      if (restaurant.photos?.profileV3?.medium?.url) {\n        imageUrl = restaurant.photos.profileV3.medium.url;\n        if (!imageUrl.startsWith('http')) {\n          imageUrl = 'https:' + imageUrl;\n        }\n      }\n      \n      // Build address\n      let address = 'Unknown';\n      if (restaurant.address) {\n        const parts = [];\n        if (restaurant.address.line1) parts.push(restaurant.address.line1);\n        if (restaurant.address.city) parts.push(restaurant.address.city);\n        if (restaurant.address.state) parts.push(restaurant.address.state);\n        if (restaurant.address.postCode) parts.push(restaurant.address.postCode);\n        address = parts.join(', ');\n      }\n      \n      // Phone info\n      const phone = restaurant.contactInformation?.formattedPhoneNumber || '';\n      \n      const restaurantObj = {\n        restaurantId,\n        name,\n        link: profileLink,\n        cuisine,\n        imageUrl,\n        rating,\n        reviewCount,\n        priceBand,\n        neighborhood,\n        address,\n        phone,\n        description,\n        coordinates: {\n          latitude: restaurant.coordinates?.latitude || null,\n          longitude: restaurant.coordinates?.longitude || null\n        },\n        features: {\n          bar: restaurant.features?.bar || false,\n          outdoor: restaurant.features?.outdoor || false,\n          counter: restaurant.features?.counter || false,\n          highTop: restaurant.features?.highTop || false\n        },\n        hasTakeout: restaurant.hasTakeout || false,\n        isPromoted: restaurant.isPromoted || false,\n        topReview: restaurant.topReview?.highlightedText || '',\n        scraped_at: new Date().toISOString(),\n        source: 'OpenTable',\n        search_query: 'new york'\n      };\n      \n      restaurants.push(restaurantObj);\n      \n    } catch (error) {\n      console.log('Error processing individual restaurant:', error.message);\n    }\n  }\n  \n} catch (error) {\n  console.log('Error parsing JSON or extracting data:', error.message);\n  return [{ json: { error: error.message, sample_html: html.substring(0, 500) } }];\n}\n\nconsole.log('Successfully extracted', restaurants.length, 'restaurants');\n\nif (restaurants.length > 0) {\n  console.log('Sample restaurant:', JSON.stringify(restaurants[0], null, 2));\n}\n\n// Return in n8n format\nreturn restaurants.map(restaurant => ({ json: restaurant }));"
      },
      "id": "dac1db94-fa39-42e0-919b-e0e70ef3c528",
      "name": "Extract Restaurant Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        680,
        300
      ]
    },
    {
      "parameters": {
        "jsCode": "// Process and validate the extracted data\nconst validRestaurants = items.filter(item => {\n  return item.json && \n         item.json.name && \n         item.json.name !== 'Unknown' && \n         !item.json.error;\n});\n\nconsole.log(`Processing ${validRestaurants.length} valid restaurants`);\n\nif (validRestaurants.length === 0) {\n  console.log('No valid restaurants found!');\n  // Return the first item to see what went wrong\n  if (items.length > 0) {\n    console.log('First item for debugging:', JSON.stringify(items[0], null, 2));\n  }\n  return items; // Return original data for debugging\n}\n\n// Add additional metadata\nconst processedRestaurants = validRestaurants.map(item => ({\n  ...item.json,\n  processed_at: new Date().toISOString(),\n  source: 'OpenTable',\n  search_query: 'new york',\n  extraction_method: 'JSON parsing'\n}));\n\nconsole.log('Sample processed restaurant:', JSON.stringify(processedRestaurants[0], null, 2));\n\nreturn processedRestaurants.map(restaurant => ({ json: restaurant }));"
      },
      "id": "process-data",
      "name": "Process and Clean Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        900,
        300
      ]
    }
  ],
  "connections": {
    "Start": {
      "main": [
        [
          {
            "node": "Fetch via ScrapingBee",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch via ScrapingBee": {
      "main": [
        [
          {
            "node": "Extract Restaurant Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Restaurant Data": {
      "main": [
        [
          {
            "node": "Process and Clean Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "meta": {
    "instanceId": "0192b40c03f1f0a5599cfa5317602d78af1f928c4282591b3a88a8e071138389"
  }
}
